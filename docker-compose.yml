version: "3"
services:
  web:
    build: ./web
    container_name: web
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./web/:/app
      - /app/node_modules
    networks:
      - app-network

  api:
    build: ./api
    container_name: api
    working_dir: /app
    restart: always
    command: "sh -c './wait-for-it.sh rabbitmq:5672 -- npm start'"
    volumes:
      - ./api/:/app
      - /app/node_modules
    ports:
      - 3333:3333
    depends_on:
      - rabbitmq
      - mongodb
    networks:
      - app-network

  mongodb:
    image: mongo
    restart: always
    logging:
      driver: none
    container_name: mongodb
    hostname: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    ports:
      - 27017:27017
    volumes:
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - app-network

  rabbitmq:
    image: "rabbitmq:3.8-management-alpine"
    logging:
      driver: none
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    networks:
      - app-network
  
  model:
    build: ./model
    container_name: model
    restart: always
    command: ["./wait-for-it.sh", "rabbitmq:5672", "--", "python3", "main.py"]
    depends_on:
      - rabbitmq
      - mongodb
    volumes:
      - ./model/:/app
    networks:
      - app-network
  
  data-clean:
    build: ./data-clean
    container_name: data-clean
    restart: always
    command: ["./wait-for-it.sh", "rabbitmq:5672", "--", "python3", "receive.py"]
    volumes:
      - ./data-clean/:/app
    networks:
      - app-network

#Docker Networks
networks:
  app-network:
    driver: bridge
